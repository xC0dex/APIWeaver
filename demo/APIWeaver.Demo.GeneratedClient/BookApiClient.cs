//----------------------
// <auto-generated>
//     Generated by APIWeaver.Generator
// </auto-generated>
//----------------------

using System.Text.Json.Serialization.Metadata;

namespace APIWeaver.Demo.GeneratedClient;

#nullable enable

public sealed class BookApiClient
{
    public async Task<Response<TOk>> GetBooksAsync<TOk>(JsonTypeInfo<TOk> typeInfoOk, CancellationToken cancellationToken = default)
    {
        using var request = new HttpRequestMessage();
        await Task.CompletedTask;
        return default!;
    }

    public async Task<Response<TCreated, TConflict>> CreateBookAsync<TCreated, TConflict>(JsonTypeInfo<TCreated> typeInfoCreated, JsonTypeInfo<TConflict> typeInfoConflict, CancellationToken cancellationToken = default)
    {
        using var request = new HttpRequestMessage();
        await Task.CompletedTask;
        return default!;
    }

    public async Task<Response<TOk, TNotFound>> GetBookAsync<TOk, TNotFound>(JsonTypeInfo<TOk> typeInfoOk, JsonTypeInfo<TNotFound> typeInfoNotFound, CancellationToken cancellationToken = default)
    {
        using var request = new HttpRequestMessage();
        await Task.CompletedTask;
        return default!;
    }

    public async Task<Response<TOk, TNotFound>> UpdateBookAsync<TOk, TNotFound>(JsonTypeInfo<TOk> typeInfoOk, JsonTypeInfo<TNotFound> typeInfoNotFound, CancellationToken cancellationToken = default)
    {
        using var request = new HttpRequestMessage();
        await Task.CompletedTask;
        return default!;
    }

    public async Task<Response<TNotFound>> DeleteBookAsync<TNotFound>(JsonTypeInfo<TNotFound> typeInfoNotFound, CancellationToken cancellationToken = default)
    {
        using var request = new HttpRequestMessage();
        await Task.CompletedTask;
        return default!;
    }
}

