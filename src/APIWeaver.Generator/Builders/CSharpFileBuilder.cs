namespace APIWeaver;

internal sealed class CSharpFileBuilder
{
    private readonly StringBuilder _builder = new();

    public string Build(CSharpFile file)
    {
        BuildFileHeader();
        BuildUsings(file.Usings);
        _builder.AppendLine();
        BuildNamespace(file.Namespace);
        BuildPreProcessorDirectives(file.PreProcessorDirectives);
        BuildClasses(file.Classes);
        return _builder.ToString();
    }

    private void BuildFileHeader()
    {
        _builder.AppendLine("""
                            //----------------------
                            // <auto-generated>
                            //     Generated by APIWeaver.Generator
                            // </auto-generated>
                            //----------------------
                            """);
    }

    private void BuildUsings(List<string> usings)
    {
        if(usings.Count == 0)
        {
            return;
        }
        _builder.AppendLine();
        foreach (var @using in usings)
        {
            _builder.AppendLine($"using {@using};");
        }
    }

    private void BuildNamespace(string @namespace)
    {
        _builder.AppendLine($"namespace {@namespace};");
    }
    
    private void BuildPreProcessorDirectives(List<string> preProcessorDirectives)
    {
        if (preProcessorDirectives.Count == 0)
        {
            return;
        }
        _builder.AppendLine();
        foreach (var directive in preProcessorDirectives)
        {
            _builder.AppendLine($"#{directive}");
        }
    }   

    private void BuildClasses(List<Class> classes)
    {
        foreach (var @class in classes)
        {
            var code = new CSharpClassBuilder().Build(@class);

            _builder.AppendLine();
            _builder.Append(code);
            _builder.AppendLine();
        }
    }
}